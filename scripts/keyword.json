[
    {
        "name": "small",
        "data": "small",
        "allowType": 6,
        "opCount": 0,
        "type": 7,
        "def": "128KB"
    },
    {
        "name": "tiny",
        "data": "tiny",
        "allowType": 6,
        "opCount": 0,
        "type": 7,
        "def": "64KB"
    },
    {
        "name": "compact",
        "data": "compact",
        "allowType": 6,
        "opCount": 0,
        "type": 7,
        "def": "640KB"
    },
    {
        "name": "huge",
        "data": "huge",
        "allowType": 6,
        "opCount": 0,
        "type": 7,
        "def": "640KB"
    },
    {
        "name": "medium",
        "data": "medium",
        "allowType": 6,
        "opCount": 0,
        "type": 7,
        "def": "640KB"
    },
    {
        "name": "large",
        "data": "large",
        "allowType": 6,
        "opCount": 0,
        "type": 7,
        "def": "640KB"
    },
    {
        "name": "flat",
        "data": "flat",
        "allowType": 6,
        "opCount": 0,
        "type": 7,
        "def": "4GB (Not supported with TASM)"
    },
    {
        "name": "stdcall",
        "data": "stdcall",
        "allowType": 6,
        "opCount": 0,
        "type": 7,
        "def": "Can be included in another file"
    },
    {
        "name": "al",
        "data": "al",
        "allowType": 6,
        "opCount": 0,
        "type": 3,
        "def": "The lower byte of ax",
        "chs": "寄存器AX的低八位"
    },
    {
        "name": "ah",
        "data": "ah",
        "allowType": 6,
        "opCount": 0,
        "type": 3,
        "def": "The upper byte of ax",
        "chs": "寄存器AX的高八位"
    },
    {
        "name": "bl",
        "data": "bl",
        "allowType": 6,
        "opCount": 0,
        "type": 3,
        "def": "The lower byte of bx",
        "chs": "寄存器BX的低八位"
    },
    {
        "name": "bh",
        "data": "bh",
        "allowType": 6,
        "opCount": 0,
        "type": 3,
        "def": "The upper byte of bx",
        "chs": "寄存器BX的高八位"
    },
    {
        "name": "cl",
        "data": "cl",
        "allowType": 6,
        "opCount": 0,
        "type": 3,
        "def": "The lower byte of cx",
        "chs": "寄存器CX的低八位"
    },
    {
        "name": "ch",
        "data": "ch",
        "allowType": 6,
        "opCount": 0,
        "type": 3,
        "def": "The upper byte of cx",
        "chs": "寄存器CX的高八位"
    },
    {
        "name": "dl",
        "data": "dl",
        "allowType": 6,
        "opCount": 0,
        "type": 3,
        "def": "The lower byte of dx",
        "chs": "寄存器DX的低八位"
    },
    {
        "name": "dh",
        "data": "dh",
        "allowType": 6,
        "opCount": 0,
        "type": 3,
        "def": "The upper byte of dx",
        "chs": "寄存器DX的高八位"
    },
    {
        "name": "ax",
        "data": "ax",
        "allowType": 6,
        "opCount": 0,
        "type": 3,
        "def": "16 bit register used with arithmatic operations",
        "chs": "16位累加器"
    },
    {
        "name": "bx",
        "data": "bx",
        "allowType": 6,
        "opCount": 0,
        "type": 3,
        "def": "16 bit register used to acess memory data",
        "chs": "16位基址寄存器"
    },
    {
        "name": "cx",
        "data": "cx",
        "allowType": 6,
        "opCount": 0,
        "type": 3,
        "def": "16 bit register used with loops",
        "chs": "16位计数器"
    },
    {
        "name": "dx",
        "data": "dx",
        "allowType": 6,
        "opCount": 0,
        "type": 3,
        "def": "16 bit register used with data mangment",
        "chs": "16位数据寄存器"
    },
    {
        "name": "sp",
        "data": "sp",
        "allowType": 6,
        "opCount": 0,
        "type": 3,
        "def": "16 bit register that points at the stack",
        "chs": "16位堆栈指针寄存器"
    },
    {
        "name": "bp",
        "data": "bp",
        "allowType": 6,
        "opCount": 0,
        "type": 3,
        "def": "16 bit register that is used to pass arguments",
        "chs": "16位基址指针寄存器"
    },
    {
        "name": "di",
        "data": "di",
        "allowType": 6,
        "opCount": 0,
        "type": 3,
        "def": "16 bit register used to acess memory data",
        "chs": "16位目的变址寄存器"
    },
    {
        "name": "si",
        "data": "si",
        "allowType": 6,
        "opCount": 0,
        "type": 3,
        "def": "16 bit register used to acess memory data",
        "chs": "16位源变址寄存器"
    },
    {
        "name": "eax",
        "data": "eax",
        "allowType": 6,
        "opCount": 0,
        "type": 3,
        "def": "32 bit register used with arithmatic operations",
        "chs": "32位累加寄存器器"
    },
    {
        "name": "ebx",
        "data": "ebx",
        "allowType": 6,
        "opCount": 0,
        "type": 3,
        "def": "32 bit register used to acess memory data",
        "chs": "32位基址寄存器"
    },
    {
        "name": "ecx",
        "data": "ecx",
        "allowType": 6,
        "opCount": 0,
        "type": 3,
        "def": "32 bit register used with loops",
        "chs": "32位计数器"
    },
    {
        "name": "edx",
        "data": "edx",
        "allowType": 6,
        "opCount": 0,
        "type": 3,
        "def": "32 bit register used with data mangment",
        "chs": "32位数据寄存器"
    },
    {
        "name": "esp",
        "data": "esp",
        "allowType": 6,
        "opCount": 0,
        "type": 3,
        "def": "32 bit register that points at the stack",
        "chs": "32位堆栈指针寄存器"
    },
    {
        "name": "ebp",
        "data": "ebp",
        "allowType": 6,
        "opCount": 0,
        "type": 3,
        "def": "32 bit register that is used to pass arguments",
        "chs": "32位基址指针寄存器"
    },
    {
        "name": "edi",
        "data": "edi",
        "allowType": 6,
        "opCount": 0,
        "type": 3,
        "def": "32 bit register used to acess memory data",
        "chs": "32位目的变址寄存器"
    },
    {
        "name": "esi",
        "data": "esi",
        "allowType": 6,
        "opCount": 0,
        "type": 3,
        "def": "32 bit register used to acess memory data",
        "chs": "32位源变址寄存器"
    },
    {
        "name": "rax",
        "data": "rax",
        "allowType": 6,
        "opCount": 0,
        "type": 3,
        "def": "64 bit register used with arithmatic operations",
        "chs": "64位累加器"
    },
    {
        "name": "rbx",
        "data": "rbx",
        "allowType": 6,
        "opCount": 0,
        "type": 3,
        "def": "64 bit register used to acess memory data",
        "chs": "64位基址寄存器"
    },
    {
        "name": "rcx",
        "data": "rcx",
        "allowType": 6,
        "opCount": 0,
        "type": 3,
        "def": "64 bit register used with loops",
        "chs": "64位计数器"
    },
    {
        "name": "rdx",
        "data": "rdx",
        "allowType": 6,
        "opCount": 0,
        "type": 3,
        "def": "64 bit register used with data mangment",
        "chs": "64位数据寄存器"
    },
    {
        "name": "rsp",
        "data": "rsp",
        "allowType": 6,
        "opCount": 0,
        "type": 3,
        "def": "64 bit register that points at the stack",
        "chs": "64位堆栈指针寄存器"
    },
    {
        "name": "rbp",
        "data": "rbp",
        "allowType": 6,
        "opCount": 0,
        "type": 3,
        "def": "64 bit register that is used to pass arguments",
        "chs": "64位基址指针寄存器"
    },
    {
        "name": "rdi",
        "data": "rdi",
        "allowType": 6,
        "opCount": 0,
        "type": 3,
        "def": "64 bit register used to acess memory data",
        "chs": "64位目的变址寄存器"
    },
    {
        "name": "rsi",
        "data": "rsi",
        "allowType": 6,
        "opCount": 0,
        "type": 3,
        "def": "64 bit register used to acess memory data",
        "chs": "64位源变址寄存器"
    },
    {
        "name": "db",
        "data": "[name] db [value]",
        "allowType": 6,
        "opCount": 2,
        "type": 5,
        "def": "Allocates a byte of memory",
        "chs": "分配1字节存储空间"
    },
    {
        "name": "dw",
        "data": "[name] dw [value]",
        "allowType": 6,
        "opCount": 2,
        "type": 5,
        "def": "Allocates 2 byte of memory (Word)",
        "chs": "分配2字节存储空间"
    },
    {
        "name": "dd",
        "data": "[name] dd [value]",
        "allowType": 6,
        "opCount": 2,
        "type": 5,
        "def": "Allocates 4 byte of memory (Double Word)",
        "chs": "分配4字节存储空间（双字）"
    },
    {
        "name": "dq",
        "data": "[name] dq [value]",
        "allowType": 6,
        "opCount": 2,
        "type": 5,
        "def": "Allocates 8 byte of memory (Quad Word)",
        "chs": "分配8字节存储空间 (四字)"
    },
    {
        "name": "dt",
        "data": "[name] dt [value]",
        "allowType": 6,
        "opCount": 2,
        "type": 5,
        "def": "Allocates 10 byte of memory ",
        "chs": "分配10字节存储空间"
    },
    {
        "name": "byte",
        "data": "byte",
        "allowType": 6,
        "opCount": -1,
        "type": 5,
        "def": "Locates 1 byte of memory"
    },
    {
        "name": "word",
        "data": "word",
        "allowType": 6,
        "opCount": -1,
        "type": 5,
        "def": "Locates 2 byte of memory (Word)"
    },
    {
        "name": "dword",
        "data": "dword",
        "allowType": 6,
        "opCount": -1,
        "type": 5,
        "def": "Locates 4 byte of memory (Double Word)"
    },
    {
        "name": "qword",
        "data": "qword",
        "allowType": 6,
        "opCount": -1,
        "type": 5,
        "def": "Locates 8 byte of memory (Quad Word)"
    },
    {
        "name": "tbyte",
        "data": "tbyte",
        "allowType": 6,
        "opCount": -1,
        "type": 5,
        "def": "Locates 10 byte of memory "
    },
    {
        "name": "cs",
        "data": "cs",
        "allowType": 6,
        "opCount": 0,
        "type": 3,
        "def": "Code segement address",
        "chs": "代码段寄存器"
    },
    {
        "name": "ss",
        "data": "ss",
        "allowType": 6,
        "opCount": 0,
        "type": 3,
        "def": "Stack segement address",
        "chs": "堆栈段寄存器"
    },
    {
        "name": "ds",
        "data": "ds",
        "allowType": 6,
        "opCount": 0,
        "type": 3,
        "def": "Data segement address",
        "chs": "数据段寄存器"
    },
    {
        "name": "es",
        "data": "es",
        "allowType": 6,
        "opCount": 0,
        "type": 3,
        "def": "Extra segement address",
        "chs": "附加段寄存器"
    },
    {
        "name": "DATASEG",
        "data": "DATASEG",
        "allowType": 6,
        "opCount": 0,
        "type": 6,
        "def": "Start of the data segment",
        "chs": "数据段的开始"
    },
    {
        "name": "IDEAL",
        "data": "IDEAL",
        "allowType": 6,
        "opCount": 0,
        "type": 6,
        "def": "",
        "chs": ""
    },
    {
        "name": "CODESEG",
        "data": "CODESEG",
        "allowType": 6,
        "opCount": 0,
        "type": 6,
        "def": "Start of the code segment",
        "chs": "代码段的开始"
    },
    {
        "name": "MODEL",
        "data": "MODEL [size]",
        "allowType": 4,
        "opCount": 1,
        "type": 6,
        "def": "Defines the scope of the file"
    },
    {
        "name": "STACK",
        "data": "STACK [constant]",
        "allowType": 2,
        "opCount": 1,
        "type": 6,
        "def": "Sets the size of the stack"
    },
    {
        "name": "mov",
        "data": "mov [operand], [operand]",
        "allowType": 6,
        "opCount": 2,
        "type": 2,
        "def": "Moves value from adress/constant/register to a register or adress."
    },
    {
        "name": "int",
        "data": "int [interruptIndex]",
        "allowType": 2,
        "opCount": 1,
        "type": 2,
        "def": "Interrupt call see [list]( https://github.com/xsro/masm-tasm/wiki/interrupt_en)"
    },
    {
        "name": "into",
        "data": "into",
        "allowType": 2,
        "opCount": 1,
        "type": 2,
        "def": "Trap into overflow flag"
    },
    {
        "name": "nop",
        "data": "nop",
        "allowType": 6,
        "opCount": 0,
        "type": 2,
        "def": "Do nothing"
    },
    {
        "name": "hlt",
        "data": "hlt",
        "allowType": 6,
        "opCount": 0,
        "type": 2,
        "def": "Enters halt mode"
    },
    {
        "name": "iret",
        "data": "iret",
        "allowType": 2,
        "opCount": 1,
        "type": 2,
        "def": " "
    },
    {
        "name": "cmp",
        "data": "cmp [operand], [operand]",
        "allowType": 6,
        "opCount": 2,
        "type": 2,
        "def": "Compares the 2 operands.",
        "chs": "比较2个操作数"
    },
    {
        "name": "include",
        "data": "include [fileName]",
        "allowType": 6,
        "opCount": 1,
        "type": 4,
        "def": "Includes a file in this file"
    },
    {
        "name": "in",
        "data": "in [operand], [operand]",
        "allowType": 6,
        "opCount": 2,
        "type": 2,
        "def": "Reads data from a port",
        "chs": "从端口读取数据"
    },
    {
        "name": "out",
        "data": "out [operand], [operand]",
        "allowType": 6,
        "opCount": 2,
        "type": 2,
        "def": "Writes data to a port",
        "chs": "向端口写数据"
    },
    {
        "name": "or",
        "data": "or [operand], [operand]",
        "allowType": 6,
        "opCount": 2,
        "type": 2,
        "def": "Or operation on 2 registers.",
        "chs": "或操作."
    },
    {
        "name": "and",
        "data": "and [operand], [operand]",
        "allowType": 6,
        "opCount": 2,
        "type": 2,
        "def": "And operation on 2 registers.",
        "chs": "与操作."
    },
    {
        "name": "xor",
        "data": "xor [operand], [operand]",
        "allowType": 6,
        "opCount": 2,
        "type": 2,
        "def": "Xor operation on 2 register",
        "chs": "异或操作"
    },
    {
        "name": "shl",
        "data": "shl [operand], [operand]",
        "allowType": 6,
        "opCount": 2,
        "type": 2,
        "def": "Moves all the bits to the left by the second operand."
    },
    {
        "name": "xchg",
        "data": "xchg [operand], [operand]",
        "allowType": 6,
        "opCount": 2,
        "type": 2,
        "def": "Exchages regeter or memeory address with register."
    },
    {
        "name": "xadd",
        "data": "xadd [operand], [operand]",
        "allowType": 6,
        "opCount": 2,
        "type": 2,
        "def": "Exchages regeter or memeory address with register and the summary is moved to SI."
    },
    {
        "name": "cmpxchg",
        "data": "cmpxchg [operand], [operand]",
        "allowType": 6,
        "opCount": 2,
        "type": 2,
        "def": "cmp + xchg."
    },
    {
        "name": "rcl",
        "data": "rcl [operand], [operand]",
        "allowType": 6,
        "opCount": 2,
        "type": 2,
        "def": "Rotates left (Carry)."
    },
    {
        "name": "rcl",
        "data": "rcl [operand], [operand]",
        "allowType": 6,
        "opCount": 2,
        "type": 2,
        "def": "Rotates left (Carry)."
    },
    {
        "name": "rcr",
        "data": "rcr [operand], [operand]",
        "allowType": 6,
        "opCount": 2,
        "type": 2,
        "def": "Rotates right (Carry)."
    },
    {
        "name": "rol",
        "data": "rol [operand], [operand]",
        "allowType": 6,
        "opCount": 2,
        "type": 2,
        "def": "Rotates left."
    },
    {
        "name": "ror",
        "data": "ror [operand], [operand]",
        "allowType": 6,
        "opCount": 2,
        "type": 2,
        "def": "Rotates right."
    },
    {
        "name": "shld",
        "data": "shld [operand], [operand]",
        "allowType": 6,
        "opCount": 2,
        "type": 2,
        "def": "Double precesion shift left."
    },
    {
        "name": "sal",
        "data": "sal [operand], [operand]",
        "allowType": 6,
        "opCount": 2,
        "type": 2,
        "def": "Moves all the bits to the left by the second operand. (Signed)"
    },
    {
        "name": "lea",
        "data": "lea [operand], [operand]",
        "allowType": 1,
        "opCount": 2,
        "type": 2,
        "def": "Moves the memory address of operand 2 to operand 1."
    },
    {
        "name": "shr",
        "data": "shr [operand], [operand]",
        "allowType": 6,
        "opCount": 2,
        "type": 2,
        "def": "Moves all the bits to the right by the second operand."
    },
    {
        "name": "shrd",
        "data": "shrd [operand], [operand]",
        "allowType": 6,
        "opCount": 2,
        "type": 2,
        "def": "Double precesion shift right."
    },
    {
        "name": "sar",
        "data": "sar [operand], [operand]",
        "allowType": 6,
        "opCount": 2,
        "type": 2,
        "def": "Moves all the bits to the right by the second operand. (Unsigned)"
    },
    {
        "name": "not",
        "data": "not [operand]",
        "allowType": 6,
        "opCount": 1,
        "type": 2,
        "def": "Flips all the bits of the operand"
    },
    {
        "name": "lahf",
        "data": "lahf",
        "allowType": 6,
        "opCount": 0,
        "type": 2,
        "def": "Move flags to ah (SF:ZF:xx:AF:xx:PF:xx:CF)"
    },
    {
        "name": "sahf",
        "data": "sahf",
        "allowType": 6,
        "opCount": 0,
        "type": 2,
        "def": "Move ah to flags (SF:ZF:xx:AF:xx:PF:xx:CF)"
    },
    {
        "name": "std",
        "data": "std",
        "allowType": 6,
        "opCount": 0,
        "type": 2,
        "def": "Set direction flag CF=1"
    },
    {
        "name": "cld",
        "data": "cld",
        "allowType": 6,
        "opCount": 0,
        "type": 2,
        "def": "Clear direction flag DF=0"
    },
    {
        "name": "sti",
        "data": "sti",
        "allowType": 6,
        "opCount": 0,
        "type": 2,
        "def": "Set interrupt flag IF=1",
        "chs": "设置i标为1"
    },
    {
        "name": "cli",
        "data": "cli",
        "allowType": 6,
        "opCount": 0,
        "type": 2,
        "def": "Clear interrupt flag IF=0",
        "chs": "设置i标为0"
    },
    {
        "name": "stc",
        "data": "stc",
        "allowType": 6,
        "opCount": 0,
        "type": 2,
        "def": "Set carry flag CF=1"
    },
    {
        "name": "clc",
        "data": "clc",
        "allowType": 6,
        "opCount": 0,
        "type": 2,
        "def": "Clear carry flag CF=0"
    },
    {
        "name": "cmc",
        "data": "cmc",
        "allowType": 6,
        "opCount": 0,
        "type": 2,
        "def": "Complement carry flag CF=!CF"
    },
    {
        "name": "proc",
        "data": "proc [name]",
        "allowType": 6,
        "opCount": 1,
        "type": 4,
        "def": "Creates a new procedure"
    },
    {
        "name": "endp",
        "data": "endp [name]",
        "allowType": 6,
        "opCount": 1,
        "type": 4,
        "def": "Ends a procedure defenition"
    },
    {
        "name": "struc",
        "data": "struc [name]",
        "allowType": 6,
        "opCount": 1,
        "type": 4,
        "def": "Creates a new structure"
    },
    {
        "name": "struct",
        "data": "struct [name]",
        "allowType": 6,
        "opCount": 1,
        "type": 4,
        "def": "Creates a new structure (Not supported)"
    },
    {
        "name": "ends",
        "data": "ends [name]",
        "allowType": 6,
        "opCount": 1,
        "type": 4,
        "def": "Ends a structure defenition"
    },
    {
        "name": "macro",
        "data": "macro [name]",
        "allowType": 6,
        "opCount": 1,
        "type": 4,
        "def": "Creates a new macro"
    },
    {
        "name": "endm",
        "data": "endm [name]",
        "allowType": 6,
        "opCount": 1,
        "type": 4,
        "def": "Ends a macro defenition"
    },
    {
        "name": "equ",
        "data": "[name] equ [value]",
        "allowType": 6,
        "opCount": 2,
        "type": 4,
        "def": "Replaces all instances of name with value"
    },
    {
        "name": "dup",
        "data": "[count] dup([values])",
        "allowType": 6,
        "opCount": 1,
        "type": 4,
        "def": "Allocates values count times"
    },
    {
        "name": "end",
        "data": "end [label]",
        "allowType": 6,
        "opCount": 1,
        "type": 4,
        "def": "Ends the file"
    },
    {
        "name": "label",
        "data": "label [name] [value]",
        "allowType": 5,
        "opCount": 2,
        "type": 4,
        "def": "Simple macro"
    },
    {
        "name": "         local",
        "data": "local [args]...",
        "allowType": 5,
        "opCount": -1,
        "type": 4,
        "def": "Create local data or labels"
    },
    {
        "name": "if",
        "data": "if [operand]",
        "allowType": 1,
        "opCount": 1,
        "type": 4,
        "def": "Compares a value to zero"
    },
    {
        "name": "ife",
        "data": "ife [operand]",
        "allowType": 1,
        "opCount": 1,
        "type": 4,
        "def": "If the value is not zero"
    },
    {
        "name": "ifb",
        "data": "ifb <[operand]>",
        "allowType": 1,
        "opCount": 1,
        "type": 4,
        "def": " "
    },
    {
        "name": "ifnb",
        "data": "ifnb <[operand]>",
        "allowType": 1,
        "opCount": 1,
        "type": 4,
        "def": " "
    },
    {
        "name": "ifdef",
        "data": "ifdef [operand]",
        "allowType": 1,
        "opCount": 1,
        "type": 4,
        "def": "If the argument exsits"
    },
    {
        "name": "ifndef",
        "data": "ifndef [operand]",
        "allowType": 1,
        "opCount": 1,
        "type": 4,
        "def": "If the argument doesn't exsits"
    },
    {
        "name": "ifdif",
        "data": "ifdif [operand], [operand]",
        "allowType": 1,
        "opCount": 2,
        "type": 4,
        "def": "If the arguments are diffrent"
    },
    {
        "name": "ifndif",
        "data": "ifndif [operand], [operand]",
        "allowType": 1,
        "opCount": 2,
        "type": 4,
        "def": "If the arguments are identical"
    },
    {
        "name": "if1",
        "data": "if1",
        "allowType": 1,
        "opCount": 0,
        "type": 4,
        "def": " "
    },
    {
        "name": "if2",
        "data": "if2",
        "allowType": 1,
        "opCount": 0,
        "type": 4,
        "def": " "
    },
    {
        "name": "rept",
        "data": "rept [operand]",
        "allowType": 1,
        "opCount": 1,
        "type": 4,
        "def": "Repeats an action a ciretien of times"
    },
    {
        "name": "irp",
        "data": "rept [operand] <[operands]>",
        "allowType": 1,
        "opCount": 2,
        "type": 4,
        "def": " "
    },
    {
        "name": "endif",
        "data": "endif",
        "allowType": 5,
        "opCount": 0,
        "type": 4,
        "def": "Closes an if statement"
    },
    {
        "name": "else",
        "data": "else",
        "allowType": 5,
        "opCount": 0,
        "type": 4,
        "def": "Accurs if the if statement before didn't"
    },
    {
        "name": "width",
        "data": "width",
        "allowType": 6,
        "opCount": 0,
        "type": 6,
        "def": " "
    },
    {
        "name": "this",
        "data": "this",
        "allowType": 6,
        "opCount": 0,
        "type": 6,
        "def": " "
    },
    {
        "name": "times",
        "data": "times",
        "allowType": 6,
        "opCount": 0,
        "type": 6,
        "def": " "
    },
    {
        "name": "length",
        "data": "length",
        "allowType": 6,
        "opCount": 0,
        "type": 6,
        "def": " "
    },
    {
        "name": "le",
        "data": "le",
        "allowType": 6,
        "opCount": 0,
        "type": 6,
        "def": " "
    },
    {
        "name": "ge",
        "data": "ge",
        "allowType": 6,
        "opCount": 0,
        "type": 6,
        "def": " "
    },
    {
        "name": "add",
        "data": "add [operand], [operand]",
        "allowType": 6,
        "opCount": 2,
        "type": 2,
        "def": "Adds the second operand to the first one.",
        "chs": "将第二个操作数加到第一个操作数."
    },
    {
        "name": "sub",
        "data": "sub [operand], [operand]",
        "allowType": 6,
        "opCount": 2,
        "type": 2,
        "def": "Subtracts the second operand from the first one.",
        "chs": "第一个操作数减去第二个操作数."
    },
    {
        "name": "inc",
        "data": "inc [operand]",
        "allowType": 6,
        "opCount": 1,
        "type": 2,
        "def": "Adds 1 to the operand.",
        "chs": "操作数加1."
    },
    {
        "name": "dec",
        "data": "dec [operand]",
        "allowType": 6,
        "opCount": 1,
        "type": 2,
        "def": "Subtracts 1 from the operand.",
        "chs": "操作数减1."
    },
    {
        "name": "neg",
        "data": "neg [operand]",
        "allowType": 6,
        "opCount": 1,
        "type": 2,
        "def": "Negates the value of the operand."
    },
    {
        "name": "abs",
        "data": "abs [operand]",
        "allowType": 6,
        "opCount": 1,
        "type": 2,
        "def": "Turns the value to a positive value. (Not supported)",
        "chs": "取绝对值(Not supported)"
    },
    {
        "name": "mul",
        "data": "mul [operand]",
        "allowType": 6,
        "opCount": 1,
        "type": 2,
        "def": "Multiplies ax by the operand (Unsigned)."
    },
    {
        "name": "imul",
        "data": "imul [operand]",
        "allowType": 6,
        "opCount": 1,
        "type": 2,
        "def": "Multiplies ax by the operand (Signed)."
    },
    {
        "name": "div",
        "data": "div [operand]",
        "allowType": 6,
        "opCount": 1,
        "type": 2,
        "def": "Divides ax by the operand (Unsigned) {Mod at dx (16 bit) or ah (8 bit)}."
    },
    {
        "name": "idiv",
        "data": "idiv [operand]",
        "allowType": 6,
        "opCount": 1,
        "type": 2,
        "def": "Divides ax by the operand (Signed) {Mod at dx (16 bit) or ah (8 bit)}."
    },
    {
        "name": "daa",
        "data": "daa",
        "allowType": 6,
        "opCount": 0,
        "type": 2,
        "def": "After addition ajusts al to be in range of a decimal number"
    },
    {
        "name": "das",
        "data": "das",
        "allowType": 6,
        "opCount": 0,
        "type": 2,
        "def": "After subtraction ajusts al to be in range of a decimal number"
    },
    {
        "name": "aaa",
        "data": "aaa",
        "allowType": 6,
        "opCount": 0,
        "type": 2,
        "def": "Ajust al to decimal number (add/sub)"
    },
    {
        "name": "aas",
        "data": "aas",
        "allowType": 6,
        "opCount": 0,
        "type": 2,
        "def": "Ajust al to decimal number (add/sub)"
    },
    {
        "name": "aam",
        "data": "aam",
        "allowType": 6,
        "opCount": 0,
        "type": 2,
        "def": "Ajust al to decimal number (mul)"
    },
    {
        "name": "aad",
        "data": "aad",
        "allowType": 6,
        "opCount": 0,
        "type": 2,
        "def": "Ajust al to decimal number (div)"
    },
    {
        "name": "wait",
        "data": "wait",
        "allowType": 6,
        "opCount": 0,
        "type": 2,
        "def": "Processor suspends instruction execution until the BUSY # pin is inactive"
    },
    {
        "name": "fwait",
        "data": "fwait",
        "allowType": 6,
        "opCount": 0,
        "type": 2,
        "def": "Processor checks for pending unmasked numeric exceptions before proceeding."
    },
    {
        "name": "push",
        "data": "push [operand]",
        "allowType": 6,
        "opCount": 1,
        "type": 2,
        "def": "pushes a value to the stack"
    },
    {
        "name": "pushf",
        "data": "pushf",
        "allowType": 6,
        "opCount": 0,
        "type": 2,
        "def": "pushes flag data to the stack"
    },
    {
        "name": "pushfw",
        "data": "pushfw",
        "allowType": 6,
        "opCount": 0,
        "type": 2,
        "def": "pushes flag data to the stack"
    },
    {
        "name": "pushfd",
        "data": "pushfd",
        "allowType": 6,
        "opCount": 0,
        "type": 2,
        "def": "pushes flag data to the stack"
    },
    {
        "name": "pop",
        "data": "pop [operand]",
        "allowType": 6,
        "opCount": 1,
        "type": 2,
        "def": "pops a value from the stack"
    },
    {
        "name": "popf",
        "data": "popf",
        "allowType": 6,
        "opCount": 0,
        "type": 2,
        "def": "pops flag data to the stack"
    },
    {
        "name": "popfw",
        "data": "popfw",
        "allowType": 6,
        "opCount": 0,
        "type": 2,
        "def": "pops flag data to the stack"
    },
    {
        "name": "popfd",
        "data": "popfd",
        "allowType": 6,
        "opCount": 0,
        "type": 2,
        "def": "pops flag data to the stack"
    },
    {
        "name": "pusha",
        "data": "pusha",
        "allowType": 6,
        "opCount": 0,
        "type": 2,
        "def": "pushes all register to the stack"
    },
    {
        "name": "popa",
        "data": "popa",
        "allowType": 6,
        "opCount": 0,
        "type": 2,
        "def": "pops all register to from the stack stack"
    },
    {
        "name": "jmp",
        "data": "jmp [label]",
        "allowType": 8,
        "opCount": 1,
        "type": 2,
        "def": "jump to a part in the code",
        "chs": "跳转到给定标号的指令"
    },
    {
        "name": "jz",
        "alias": [
            "je"
        ],
        "data": "jz [label]",
        "allowType": 8,
        "opCount": 1,
        "type": 2,
        "def": "jump if zero flag on\n\njump if equal",
        "chs": "假如z标为1跳转\n\n相等时跳转"
    },
    {
        "name": "jnz",
        "alias": [
            "jne"
        ],
        "data": "jnz [label]",
        "allowType": 8,
        "opCount": 1,
        "type": 2,
        "def": "jump if zero flag off\n\njump if not equal",
        "chs": "假如z标为0跳转\n\n不相等时跳转"
    },
    {
        "name": "js",
        "data": "js [label]",
        "allowType": 8,
        "opCount": 1,
        "type": 2,
        "def": "jump if sign flag on",
        "chs": "假如s标为1跳转"
    },
    {
        "name": "jns",
        "data": "jns [label]",
        "allowType": 8,
        "opCount": 1,
        "type": 2,
        "def": "jump if sign flag off",
        "chs": "假如s标为0跳转"
    },
    {
        "name": "jp",
        "alias": [
            "jpe"
        ],
        "data": "jp [label]",
        "allowType": 8,
        "opCount": 1,
        "type": 2,
        "def": "jump if parity flag on",
        "chs": "假如p标为1跳转"
    },
    {
        "name": "jnp",
        "alias": [
            "jpo"
        ],
        "data": "jnp [label]",
        "allowType": 8,
        "opCount": 1,
        "type": 2,
        "def": "jump if parity flag off",
        "chs": "假如p标为0跳转"
    },
    {
        "name": "jo",
        "data": "jo [label]",
        "allowType": 8,
        "opCount": 1,
        "type": 2,
        "def": "jump if Overflow flag on",
        "chs": "假如o标为1跳转"
    },
    {
        "name": "jno",
        "data": "jno [label]",
        "allowType": 8,
        "opCount": 1,
        "type": 2,
        "def": "jump if Overflow flag off",
        "chs": "假如o标为0跳转"
    },
    {
        "name": "ja",
        "alias": [
            "jnbe"
        ],
        "data": "ja [label]",
        "allowType": 8,
        "opCount": 1,
        "type": 2,
        "def": "jump if greater (Unsinged)",
        "chs": "（无符号数）大于跳转"
    },
    {
        "name": "jna",
        "alias": [
            "jbe"
        ],
        "data": "ja [label]",
        "allowType": 8,
        "opCount": 1,
        "type": 2,
        "def": "jump if less or equal(Unsinged)",
        "chs": "（无符号数）不大于跳转"
    },
    {
        "name": "jc",
        "alias": [
            "jb",
            "jnae"
        ],
        "data": "jc [label]",
        "allowType": 8,
        "opCount": 1,
        "type": 2,
        "def": "jump if less (Unsinged)\n\njump if carry flag on",
        "chs": "（无符号数）小于跳转"
    },
    {
        "name": "jnc",
        "alias": [
            "jnb",
            "jae"
        ],
        "data": "jnc [label]",
        "allowType": 8,
        "opCount": 1,
        "type": 2,
        "def": "jump if greater or equals(Unsigned)\n\njump if carry flag off",
        "chs": "（无符号数）不小于跳转"
    },
    {
        "name": "jg",
        "data": "jg [label]",
        "allowType": 8,
        "opCount": 1,
        "type": 2,
        "def": "jump if greater (Singed)",
        "chs": "（有符号数）大于时跳转"
    },
    {
        "name": "jge",
        "data": "jge [label]",
        "allowType": 8,
        "opCount": 1,
        "type": 2,
        "def": "jump if greater or equals (Signed)",
        "chs": "（有符号数）不大于时跳转"
    },
    {
        "name": "jl",
        "data": "jl [label]",
        "allowType": 8,
        "opCount": 1,
        "type": 2,
        "def": "jump if less (Singed)",
        "chs": "（有符号数）小于时跳转"
    },
    {
        "name": "jle",
        "data": "jle [label]",
        "allowType": 8,
        "opCount": 1,
        "type": 2,
        "def": "jump if less or equals (Signed)",
        "chs": "（有符号数）不小于时跳转"
    },
    {
        "name": "jcxz",
        "data": "jcxz [label]",
        "allowType": 8,
        "opCount": 1,
        "type": 2,
        "def": "jump if cx is 0",
        "chs": "假如CX寄存器为0跳转"
    },
    {
        "name": "jecxz",
        "data": "jcxz [label]",
        "allowType": 8,
        "opCount": 1,
        "type": 2,
        "def": "jump if ecx is 0",
        "chs": "假如ECX寄存器为0跳转"
    },
    {
        "name": "call",
        "data": "call [procName]",
        "allowType": 6,
        "opCount": 1,
        "type": 2,
        "def": "Calls a procedure",
        "chs": "调用子程序"
    },
    {
        "name": "far",
        "data": "[procName] far",
        "allowType": 6,
        "opCount": 0,
        "type": 6,
        "def": "Turns the procedure into a far procedure"
    },
    {
        "name": "near",
        "data": "[procName] near",
        "allowType": 6,
        "opCount": 0,
        "type": 6,
        "def": "Turns the procedure into a near procedure"
    },
    {
        "name": "ret",
        "data": "ret [op:RemoveStack]",
        "allowType": 6,
        "opCount": 0,
        "type": 2,
        "def": "Returns from a procedure",
        "chs": "从子程序返回"
    },
    {
        "name": "enter",
        "data": "enter [dynamic], [nesting]",
        "allowType": 6,
        "opCount": 1,
        "type": 2,
        "def": "Create dynamic and nested stack",
        "chs": "Create dynamic and nested stack 创建动态嵌套堆栈"
    },
    {
        "name": "leave",
        "data": "leave",
        "allowType": 6,
        "opCount": 0,
        "type": 2,
        "def": "High level ret"
    },
    {
        "name": "les",
        "data": "les [poiner], [register]",
        "allowType": 0,
        "opCount": 2,
        "type": 2,
        "def": "Load memory from ES:Pointer 1 to operand 2 from es"
    },
    {
        "name": "lds",
        "data": "lds [poiner], [register]",
        "allowType": 0,
        "opCount": 2,
        "type": 2,
        "def": "Load memory from DS:Pointer 1 to operand 2 from ds"
    },
    {
        "name": "lfs",
        "data": "lfs [poiner], [register]",
        "allowType": 0,
        "opCount": 2,
        "type": 2,
        "def": "Load memory from FS:Pointer 1 to operand 2 from fs"
    },
    {
        "name": "lgs",
        "data": "lgs [poiner], [register]",
        "allowType": 0,
        "opCount": 2,
        "type": 2,
        "def": "Load memory from GS:Pointer 1 to operand 2 from gs"
    },
    {
        "name": "lss",
        "data": "lss [poiner], [register]",
        "allowType": 0,
        "opCount": 2,
        "type": 2,
        "def": "Load memory from SS:Pointer to operand 2 from ss"
    },
    {
        "name": "st0",
        "data": "st0",
        "allowType": 6,
        "opCount": 0,
        "type": 3,
        "def": "Floting point register 0"
    },
    {
        "name": "st1",
        "data": "st1",
        "allowType": 6,
        "opCount": 0,
        "type": 3,
        "def": "Floting point register 1"
    },
    {
        "name": "st2",
        "data": "st2",
        "allowType": 6,
        "opCount": 0,
        "type": 3,
        "def": "Floting point register 2"
    },
    {
        "name": "st3",
        "data": "st3",
        "allowType": 6,
        "opCount": 0,
        "type": 3,
        "def": "Floting point register 3"
    },
    {
        "name": "st4",
        "data": "st4",
        "allowType": 6,
        "opCount": 0,
        "type": 3,
        "def": "Floting point register 4"
    },
    {
        "name": "st5",
        "data": "st5",
        "allowType": 6,
        "opCount": 0,
        "type": 3,
        "def": "Floting point register 5"
    },
    {
        "name": "st6",
        "data": "st6",
        "allowType": 6,
        "opCount": 0,
        "type": 3,
        "def": "Floting point register 6"
    },
    {
        "name": "st7",
        "data": "st7",
        "allowType": 6,
        "opCount": 0,
        "type": 3,
        "def": "Floting point register 7"
    },
    {
        "name": "st",
        "data": "st",
        "allowType": 6,
        "opCount": 0,
        "type": 3,
        "def": "Floting point register"
    },
    {
        "name": "db0",
        "data": "db0",
        "allowType": 6,
        "opCount": 0,
        "type": 3,
        "def": "Debug register 0"
    },
    {
        "name": "db1",
        "data": "db1",
        "allowType": 6,
        "opCount": 0,
        "type": 3,
        "def": "Debug register 1"
    },
    {
        "name": "db2",
        "data": "db2",
        "allowType": 6,
        "opCount": 0,
        "type": 3,
        "def": "Debug register 2"
    },
    {
        "name": "db3",
        "data": "db3",
        "allowType": 6,
        "opCount": 0,
        "type": 3,
        "def": "Debug register 3"
    },
    {
        "name": "tr6",
        "data": "tr6",
        "allowType": 6,
        "opCount": 0,
        "type": 3,
        "def": "Test register 4"
    },
    {
        "name": "tr7",
        "data": "tr7",
        "allowType": 6,
        "opCount": 0,
        "type": 3,
        "def": "Test register 5"
    },
    {
        "name": "db6",
        "data": "db6",
        "allowType": 6,
        "opCount": 0,
        "type": 3,
        "def": "Debug register 6"
    },
    {
        "name": "db7",
        "data": "db7",
        "allowType": 6,
        "opCount": 0,
        "type": 3,
        "def": "Debug register 7"
    },
    {
        "name": "rep",
        "data": "rep [operation]",
        "allowType": 6,
        "opCount": 1,
        "type": 2,
        "def": "Repeat while equals",
        "chs": "Repeat while equals 相等时重复"
    },
    {
        "name": "repz",
        "data": "repz [operation]",
        "allowType": 6,
        "opCount": 1,
        "type": 2,
        "def": "Repeat while zero",
        "chs": "Repeat while zero 不等于零的时候重复"
    },
    {
        "name": "repnz",
        "data": "repnz [operation]",
        "allowType": 6,
        "opCount": 1,
        "type": 2,
        "def": "Repeat while not zero",
        "chs": "Repeat while not zero 非零时重复"
    },
    {
        "name": "xlat",
        "data": "xlat",
        "allowType": 6,
        "opCount": 0,
        "type": 2,
        "def": "Table lookup to al",
        "chs": "Table lookup to al al表查找"
    },
    {
        "name": "bound",
        "data": "bound [operand], [operand]",
        "allowType": 6,
        "opCount": 2,
        "type": 2,
        "def": "Check the 16-bit signed array index value in the operand 1 against the doubleword with the upper and lower bounds specified by operand 2"
    },
    {
        "name": "scas",
        "data": "scas",
        "allowType": 6,
        "opCount": 0,
        "type": 2,
        "def": "Compare ES:DI with AX or AL"
    },
    {
        "name": "scasb",
        "data": "scasb",
        "allowType": 6,
        "opCount": 0,
        "type": 2,
        "def": "Compare ES:DI with AL"
    },
    {
        "name": "scasw",
        "data": "scasw",
        "allowType": 6,
        "opCount": 0,
        "type": 2,
        "def": "Compare ES:DI with AX"
    },
    {
        "name": "scasd",
        "data": "scasd",
        "allowType": 6,
        "opCount": 0,
        "type": 2,
        "def": "Compare ES:DI with EAX (Not supported)"
    },
    {
        "name": "cmps",
        "data": "cmps",
        "allowType": 6,
        "opCount": 0,
        "type": 2,
        "def": "Compare ES:DI with ES:SI"
    },
    {
        "name": "cmpsb",
        "data": "cmpsb",
        "allowType": 6,
        "opCount": 0,
        "type": 2,
        "def": "Compare ES:DI with ES:SI (Byte)"
    },
    {
        "name": "cmpsw",
        "data": "cmpsw",
        "allowType": 6,
        "opCount": 0,
        "type": 2,
        "def": "Compare ES:DI with ES:SI"
    },
    {
        "name": "cmpsd",
        "data": "cmpsd",
        "allowType": 6,
        "opCount": 0,
        "type": 2,
        "def": "Compare ES:DI with ES:SI (32 bit)"
    },
    {
        "name": "stos",
        "data": "stos",
        "allowType": 6,
        "opCount": 0,
        "type": 2,
        "def": "Sets ES:DI to AX AL"
    },
    {
        "name": "stosb",
        "data": "stosb",
        "allowType": 6,
        "opCount": 0,
        "type": 2,
        "def": "Sets ES:DI to AL"
    },
    {
        "name": "stosw",
        "data": "stosw",
        "allowType": 6,
        "opCount": 0,
        "type": 2,
        "def": "Sets ES:DI to AX"
    },
    {
        "name": "stosd",
        "data": "stosd",
        "allowType": 6,
        "opCount": 0,
        "type": 2,
        "def": "Sets ES:DI to EAX  (Not supported)"
    },
    {
        "name": "lods",
        "data": "lods",
        "allowType": 6,
        "opCount": 0,
        "type": 2,
        "def": "Sets Ax to ES:DI"
    },
    {
        "name": "lodsb",
        "data": "lodsb",
        "allowType": 6,
        "opCount": 0,
        "type": 2,
        "def": "Sets AL to ES:DI"
    },
    {
        "name": "lodsw",
        "data": "lodsw",
        "allowType": 6,
        "opCount": 0,
        "type": 2,
        "def": "Sets AX to ES:DI"
    },
    {
        "name": "lodsd",
        "data": "lodsd",
        "allowType": 6,
        "opCount": 0,
        "type": 2,
        "def": "Sets EAX to ES:DI 32-bit (Not supported)"
    },
    {
        "name": "outs",
        "data": "outs",
        "allowType": 6,
        "opCount": 0,
        "type": 2,
        "def": " "
    },
    {
        "name": "outsb",
        "data": "outsb",
        "allowType": 6,
        "opCount": 0,
        "type": 2,
        "def": "ES:DI -> DL"
    },
    {
        "name": "outsw",
        "data": "outsw",
        "allowType": 6,
        "opCount": 0,
        "type": 2,
        "def": "ES:DI -> DX"
    },
    {
        "name": "outsd",
        "data": "outsd",
        "allowType": 6,
        "opCount": 0,
        "type": 2,
        "def": "ES:DI -> EDX (Not supported)"
    },
    {
        "name": "ins",
        "data": "ins",
        "allowType": 6,
        "opCount": 0,
        "type": 2,
        "def": " "
    },
    {
        "name": "insb",
        "data": "insb",
        "allowType": 6,
        "opCount": 0,
        "type": 2,
        "def": "ES:DI <- DL"
    },
    {
        "name": "insw",
        "data": "insw",
        "allowType": 6,
        "opCount": 0,
        "type": 2,
        "def": "ES:DI <- DX"
    },
    {
        "name": "insd",
        "data": "insd",
        "allowType": 6,
        "opCount": 0,
        "type": 2,
        "def": "ES:DI <- EDX (Not supported)"
    },
    {
        "name": "movs",
        "data": "movs",
        "allowType": 6,
        "opCount": 0,
        "type": 2,
        "def": "Sets Ax to ES:DI"
    },
    {
        "name": "movsb",
        "data": "movsb",
        "allowType": 6,
        "opCount": 0,
        "type": 2,
        "def": "Sets AL to ES:DI"
    },
    {
        "name": "movsw",
        "data": "movsw",
        "allowType": 6,
        "opCount": 0,
        "type": 2,
        "def": "Sets AX to ES:DI"
    },
    {
        "name": "movsd",
        "data": "movsd",
        "allowType": 6,
        "opCount": 0,
        "type": 2,
        "def": "Sets EAX to ES:DI 32-bit (Not supported)"
    },
    {
        "name": "req",
        "data": "req",
        "allowType": 6,
        "opCount": 0,
        "type": 2,
        "def": "(Not supported)"
    },
    {
        "name": "c",
        "data": "c",
        "allowType": 6,
        "opCount": 0,
        "type": 2,
        "def": "(Not supported)"
    },
    {
        "name": "wrt",
        "data": "wrt",
        "allowType": 6,
        "opCount": 0,
        "type": 2,
        "def": "(Not supported)"
    },
    {
        "name": "loop",
        "data": "loop [label]",
        "allowType": 8,
        "opCount": 1,
        "type": 2,
        "def": "- decrease `CX`\n\n- Jumps to a label if cx is not 0"
    },
    {
        "name": "loopz",
        "alias": [
            "loope"
        ],
        "data": "loope [label]",
        "allowType": 8,
        "opCount": 1,
        "type": 2,
        "def": "- decrease `CX`\n\n- Jumps to a label if cx is not 0 **and** Zero flag is 1"
    },
    {
        "name": "loopnz",
        "alias": [
            "loopne"
        ],
        "data": "loopz [label]",
        "allowType": 8,
        "opCount": 1,
        "type": 2,
        "def": "- decrease `CX`\n\n- Jumps to a label if cx is not 0 **and** zero flag is not 1"
    }
]